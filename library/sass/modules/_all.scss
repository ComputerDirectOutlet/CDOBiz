//
// font face
//
@mixin declare-font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal) {
    @font-face {
        $font-family: '../../fonts/';
        font-family: '#{$font-family}';
        src: url('#{$font-path}#{$font-filename}.eot');
        src: url('#{$font-path}#{$font-filename}.eot?#iefix') format('embedded-opentype'),
        url('#{$font-path}#{$font-filename}.woff') format('woff'),
        url('#{$font-path}#{$font-filename}.ttf') format('truetype'),
        url('#{$font-path}#{$font-filename}.svg##{$font-family}') format('svg');
        font-weight: $font-weight;
        font-style: $font-style;
        font-stretch: $font-stretch;
    }
}


//
//calculate em
//

@function calc-em($target-px, $context) {
  @return ($target-px / $context) * 1em;
}


//
//media query mixin
//

$break-small: 992px;
$break-large: 1333px;

@mixin respond-to($media) {
  @if $media == handhelds {
    @media only screen and (max-width: $break-small) { @content; }
  }
  @else if $media == medium-screens {
    @media only screen and (min-width: $break-small + 1) and (max-width: $break-large - 1) { @content; }
  }
  @else if $media == wide-screens {
    @media only screen and (min-width: $break-large) { @content; }
  }
}
